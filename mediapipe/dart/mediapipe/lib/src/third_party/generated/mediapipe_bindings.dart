// AUTO GENERATED FILE, DO NOT EDIT.
//
// Generated by `package:ffigen`.
// ignore_for_file: type=lint
import 'dart:ffi' as ffi;

/// MediaPipe bindings.
class flutter_mediapipe {
  /// Holds the symbol lookup function.
  final ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
      _lookup;

  /// The symbols are looked up in [dynamicLibrary].
  flutter_mediapipe(ffi.DynamicLibrary dynamicLibrary)
      : _lookup = dynamicLibrary.lookup;

  /// The symbols are looked up with [lookup].
  flutter_mediapipe.fromLookup(
      ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
          lookup)
      : _lookup = lookup;

  void text_classifier_create(
    TextClassifierOptions options,
  ) {
    return _text_classifier_create(
      options,
    );
  }

  late final _text_classifier_createPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(TextClassifierOptions)>>(
          'text_classifier_create');
  late final _text_classifier_create = _text_classifier_createPtr
      .asFunction<void Function(TextClassifierOptions)>();

  ffi.Pointer<TextClassifierResult> text_classifier_classify(
    ffi.Pointer<ffi.Void> classifier,
    ffi.Pointer<ffi.Char> utf8_text,
  ) {
    return _text_classifier_classify(
      classifier,
      utf8_text,
    );
  }

  late final _text_classifier_classifyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<TextClassifierResult> Function(ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Char>)>>('text_classifier_classify');
  late final _text_classifier_classify =
      _text_classifier_classifyPtr.asFunction<
          ffi.Pointer<TextClassifierResult> Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<TextClassifierResult> text_classifier_classify_simple(
    ffi.Pointer<ffi.Char> utf8_text,
  ) {
    return _text_classifier_classify_simple(
      utf8_text,
    );
  }

  late final _text_classifier_classify_simplePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<TextClassifierResult> Function(
              ffi.Pointer<ffi.Char>)>>('text_classifier_classify_simple');
  late final _text_classifier_classify_simple =
      _text_classifier_classify_simplePtr.asFunction<
          ffi.Pointer<TextClassifierResult> Function(ffi.Pointer<ffi.Char>)>();

  void text_classifier_close(
    ffi.Pointer<ffi.Void> classifier,
  ) {
    return _text_classifier_close(
      classifier,
    );
  }

  late final _text_classifier_closePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>(
          'text_classifier_close');
  late final _text_classifier_close = _text_classifier_closePtr
      .asFunction<void Function(ffi.Pointer<ffi.Void>)>();
}

final class __mbstate_t extends ffi.Union {
  @ffi.Array.multi([128])
  external ffi.Array<ffi.Char> __mbstate8;

  @ffi.LongLong()
  external int _mbstateL;
}

final class __darwin_pthread_handler_rec extends ffi.Struct {
  external ffi
      .Pointer<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>
      __routine;

  external ffi.Pointer<ffi.Void> __arg;

  external ffi.Pointer<__darwin_pthread_handler_rec> __next;
}

final class _opaque_pthread_attr_t extends ffi.Struct {
  @ffi.Long()
  external int __sig;

  @ffi.Array.multi([56])
  external ffi.Array<ffi.Char> __opaque;
}

final class _opaque_pthread_cond_t extends ffi.Struct {
  @ffi.Long()
  external int __sig;

  @ffi.Array.multi([40])
  external ffi.Array<ffi.Char> __opaque;
}

final class _opaque_pthread_condattr_t extends ffi.Struct {
  @ffi.Long()
  external int __sig;

  @ffi.Array.multi([8])
  external ffi.Array<ffi.Char> __opaque;
}

final class _opaque_pthread_mutex_t extends ffi.Struct {
  @ffi.Long()
  external int __sig;

  @ffi.Array.multi([56])
  external ffi.Array<ffi.Char> __opaque;
}

final class _opaque_pthread_mutexattr_t extends ffi.Struct {
  @ffi.Long()
  external int __sig;

  @ffi.Array.multi([8])
  external ffi.Array<ffi.Char> __opaque;
}

final class _opaque_pthread_once_t extends ffi.Struct {
  @ffi.Long()
  external int __sig;

  @ffi.Array.multi([8])
  external ffi.Array<ffi.Char> __opaque;
}

final class _opaque_pthread_rwlock_t extends ffi.Struct {
  @ffi.Long()
  external int __sig;

  @ffi.Array.multi([192])
  external ffi.Array<ffi.Char> __opaque;
}

final class _opaque_pthread_rwlockattr_t extends ffi.Struct {
  @ffi.Long()
  external int __sig;

  @ffi.Array.multi([16])
  external ffi.Array<ffi.Char> __opaque;
}

final class _opaque_pthread_t extends ffi.Struct {
  @ffi.Long()
  external int __sig;

  external ffi.Pointer<__darwin_pthread_handler_rec> __cleanup_stack;

  @ffi.Array.multi([8176])
  external ffi.Array<ffi.Char> __opaque;
}

final class Category extends ffi.Struct {
  @ffi.Int()
  external int index;

  @ffi.Float()
  external double score;

  external ffi.Pointer<ffi.Char> category_name;

  external ffi.Pointer<ffi.Char> display_name;
}

final class Classifications extends ffi.Struct {
  external ffi.Pointer<Category> categories;

  @ffi.Uint32()
  external int categories_count;

  @ffi.Int()
  external int head_index;

  external ffi.Pointer<ffi.Char> head_name;
}

final class ClassificationResult extends ffi.Struct {
  external ffi.Pointer<Classifications> classifications;

  @ffi.Uint32()
  external int classifications_count;

  @ffi.Int64()
  external int timestamp_ms;

  @ffi.Bool()
  external bool has_timestamp_ms;
}

final class BaseOptions extends ffi.Struct {
  external ffi.Pointer<ffi.Char> model_asset_buffer;

  external ffi.Pointer<ffi.Char> model_asset_path;
}

final class ClassifierOptions extends ffi.Struct {
  external ffi.Pointer<ffi.Char> display_names_locale;

  @ffi.Int()
  external int max_results;

  @ffi.Float()
  external double score_threshold;

  external ffi.Pointer<ffi.Pointer<ffi.Char>> category_allowlist;

  @ffi.Uint32()
  external int category_allowlist_count;

  external ffi.Pointer<ffi.Pointer<ffi.Char>> category_denylist;

  @ffi.Uint32()
  external int category_denylist_count;
}

final class TextClassifierOptions extends ffi.Struct {
  external BaseOptions base_options;

  external ClassifierOptions classifier_options;
}

typedef TextClassifierResult = ClassificationResult;

const int true1 = 1;

const int false1 = 0;

const int __bool_true_false_are_defined = 1;

const int __WORDSIZE = 64;

const int __DARWIN_ONLY_64_BIT_INO_T = 1;

const int __DARWIN_ONLY_UNIX_CONFORMANCE = 1;

const int __DARWIN_ONLY_VERS_1050 = 1;

const int __DARWIN_UNIX03 = 1;

const int __DARWIN_64_BIT_INO_T = 1;

const int __DARWIN_VERS_1050 = 1;

const int __DARWIN_NON_CANCELABLE = 0;

const String __DARWIN_SUF_EXTSN = '\$DARWIN_EXTSN';

const int __DARWIN_C_ANSI = 4096;

const int __DARWIN_C_FULL = 900000;

const int __DARWIN_C_LEVEL = 900000;

const int __STDC_WANT_LIB_EXT1__ = 1;

const int __DARWIN_NO_LONG_LONG = 0;

const int _DARWIN_FEATURE_64_BIT_INODE = 1;

const int _DARWIN_FEATURE_ONLY_64_BIT_INODE = 1;

const int _DARWIN_FEATURE_ONLY_VERS_1050 = 1;

const int _DARWIN_FEATURE_ONLY_UNIX_CONFORMANCE = 1;

const int _DARWIN_FEATURE_UNIX_CONFORMANCE = 3;

const int __has_ptrcheck = 0;

const int __DARWIN_NULL = 0;

const int __PTHREAD_SIZE__ = 8176;

const int __PTHREAD_ATTR_SIZE__ = 56;

const int __PTHREAD_MUTEXATTR_SIZE__ = 8;

const int __PTHREAD_MUTEX_SIZE__ = 56;

const int __PTHREAD_CONDATTR_SIZE__ = 8;

const int __PTHREAD_COND_SIZE__ = 40;

const int __PTHREAD_ONCE_SIZE__ = 8;

const int __PTHREAD_RWLOCK_SIZE__ = 192;

const int __PTHREAD_RWLOCKATTR_SIZE__ = 16;

const int USER_ADDR_NULL = 0;

const int INT8_MAX = 127;

const int INT16_MAX = 32767;

const int INT32_MAX = 2147483647;

const int INT64_MAX = 9223372036854775807;

const int INT8_MIN = -128;

const int INT16_MIN = -32768;

const int INT32_MIN = -2147483648;

const int INT64_MIN = -9223372036854775808;

const int UINT8_MAX = 255;

const int UINT16_MAX = 65535;

const int UINT32_MAX = 4294967295;

const int UINT64_MAX = -1;

const int INT_LEAST8_MIN = -128;

const int INT_LEAST16_MIN = -32768;

const int INT_LEAST32_MIN = -2147483648;

const int INT_LEAST64_MIN = -9223372036854775808;

const int INT_LEAST8_MAX = 127;

const int INT_LEAST16_MAX = 32767;

const int INT_LEAST32_MAX = 2147483647;

const int INT_LEAST64_MAX = 9223372036854775807;

const int UINT_LEAST8_MAX = 255;

const int UINT_LEAST16_MAX = 65535;

const int UINT_LEAST32_MAX = 4294967295;

const int UINT_LEAST64_MAX = -1;

const int INT_FAST8_MIN = -128;

const int INT_FAST16_MIN = -32768;

const int INT_FAST32_MIN = -2147483648;

const int INT_FAST64_MIN = -9223372036854775808;

const int INT_FAST8_MAX = 127;

const int INT_FAST16_MAX = 32767;

const int INT_FAST32_MAX = 2147483647;

const int INT_FAST64_MAX = 9223372036854775807;

const int UINT_FAST8_MAX = 255;

const int UINT_FAST16_MAX = 65535;

const int UINT_FAST32_MAX = 4294967295;

const int UINT_FAST64_MAX = -1;

const int INTPTR_MAX = 9223372036854775807;

const int INTPTR_MIN = -9223372036854775808;

const int UINTPTR_MAX = -1;

const int INTMAX_MAX = 9223372036854775807;

const int UINTMAX_MAX = -1;

const int INTMAX_MIN = -9223372036854775808;

const int PTRDIFF_MIN = -9223372036854775808;

const int PTRDIFF_MAX = 9223372036854775807;

const int SIZE_MAX = -1;

const int RSIZE_MAX = 9223372036854775807;

const int WCHAR_MAX = 2147483647;

const int WCHAR_MIN = -2147483648;

const int WINT_MIN = -2147483648;

const int WINT_MAX = 2147483647;

const int SIG_ATOMIC_MIN = -2147483648;

const int SIG_ATOMIC_MAX = 2147483647;
