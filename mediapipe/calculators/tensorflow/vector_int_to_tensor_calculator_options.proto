// Copyright 2019 The MediaPipe Authors.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto2";

package mediapipe;

import "mediapipe/framework/calculator.proto";
import "tensorflow/core/framework/types.proto";

message VectorIntToTensorCalculatorOptions {
  extend mediapipe.CalculatorOptions {
    optional VectorIntToTensorCalculatorOptions ext = 275364184;
  }
  enum InputSize {
    UNKNOWN = 0;
    INPUT_1D = 1;
    INPUT_2D = 2;
  }

  // If input_size is INPUT_2D, unpack a vector<vector<int>> to a
  // 2d tensor (matrix). If INPUT_1D, convert a single int or vector<int>
  // into a 1d tensor (vector).
  optional InputSize input_size = 1 [default = INPUT_1D];

  // If true, the output tensor is transposed.
  // Otherwise, the output tensor is not transposed.
  // It will be ignored if tensor_is_2d is INPUT_1D.
  optional bool transpose = 2 [default = false];

  optional tensorflow.DataType tensor_data_type = 3 [default = DT_INT32];

  // If true, the calculator will output the value as a scalar tensor.
  // This is only available for single values.
  optional bool scalar_output = 4;
}
